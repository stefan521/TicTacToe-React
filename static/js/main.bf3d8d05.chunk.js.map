{"version":3,"sources":["Components/Square/Square.jsx","Components/Board/Board.jsx","Components/Status/Status.jsx","Components/Summary/Summary.jsx","Components/Game/helper.js","Components/Game/Game.jsx","index.jsx"],"names":["Square","props","onClick","winSquare","value","className","type","Board","state","boardSize","squareNumber","winLine","this","includes","squares","isWinSquare","key","Array","i","renderSquare","React","Component","Status","status","xIsNext","gameEnded","winner","getStatus","Summary","descending","move","player","summary","x","square","y","Math","floor","index","moves","length","slice","reverse","map","getPlaySummary","getMoveAtIndex","checkCurrentMove","stepNumber","setState","id","reverseMoves","getMoves","getGameStatus","lines","a","b","c","line","checkWinner","draw","isBoardFull","Game","history","fill","historyUntilStep","movesUntilStep","concat","current","handleClick","step","jumpTo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf3d8d05.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\n\ntype Props = {\n  onClick: Function,\n  winSquare: boolean,\n  value: string\n};\n\nexport default function Square(props: Props) {\n  const { onClick } = props;\n  const { winSquare } = props;\n  const { value } = props;\n\n  function pickClass() {\n    if (winSquare === true && value === 'X') {\n      return 'win-x square';\n    }\n\n    if (winSquare === true && value === 'O') {\n      return 'win-o square';\n    }\n\n    return 'square';\n  }\n\n  return (\n    <div className=\"grid-item\">\n      <button\n        type=\"button\"\n        onClick={onClick}\n        className={pickClass()}\n      >\n        {value}\n      </button>\n    </div>\n  );\n}\n","// @flow\nimport React from 'react';\nimport Square from '../Square/Square.jsx';\n\ntype Props = {\n  winLine: Array<number>,\n  squares: Array<string>,\n  onClick: Function\n};\n\ntype State = {\n  boardSize: number;\n};\n\nclass Board extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      boardSize: 9,\n    };\n  }\n\n  isWinSquare(squareNumber: number) {\n    const { winLine } = this.props;\n    if (winLine && winLine.includes(squareNumber)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  renderSquare(squareNumber: number) {\n    const { squares } = this.props;\n    const { onClick } = this.props;\n\n    return (\n      <Square\n        value={squares[squareNumber]}\n        onClick={() => onClick(squareNumber)}\n        winSquare={this.isWinSquare(squareNumber)}\n        key={squareNumber}\n      />\n    );\n  }\n\n  render() {\n    // eslint-disable-next-line prefer-const\n    let squares = Array(9);\n    const { boardSize } = this.state;\n\n    for (let i = 0; i < boardSize; i += 1) {\n      squares[i] = this.renderSquare(i);\n    }\n\n    return (\n      <div className=\"board-wrapper\">\n        <div className=\"game-board\">{squares}</div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","// @flow\nimport React from 'react';\n\ntype Props = {\n  status: {\n    gameEnded: boolean,\n    winner: string\n  },\n  xIsNext : boolean\n};\n\nfunction getStatus(status, xIsNext) {\n  let statusLine;\n\n  if (status.gameEnded && status.winner) {\n    statusLine = `Winner: ${status.winner}`;\n  } else if (status.gameEnded) {\n    statusLine = 'Draw';\n  } else {\n    statusLine = `Next player: ${xIsNext === true ? 'X' : 'O'}`;\n  }\n\n  return statusLine;\n}\n\nfunction Status(props: Props) {\n  const { status } = props;\n  const { xIsNext } = props;\n\n  return (\n    <div className=\"game-status\">\n      {getStatus(status, xIsNext)}\n    </div>\n  );\n}\n\nexport default Status;\n","// @flow\n/* eslint-disable class-methods-use-this */\nimport React from 'react';\nimport Status from '../Status/Status.jsx';\n\ntype Move = {\n  player: string,\n  square: number\n};\n\ntype Props = {\n  moves: Array<Move>,\n  onClick: Function,\n  stepNumber: number,\n  xIsNext: boolean,\n  status: {\n    gameEnded: boolean,\n    winner: string,\n    line: Array<any>\n  }\n};\n\ntype State = {\n  descending: boolean\n};\n\nclass Summary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      descending: true,\n    };\n  }\n\n  getPlaySummary(move: Move) {\n    if (move.player === null) {\n      return 'go to game start';\n    }\n\n    const summary = `go to move ${move.player} at `;\n    const x = move.square % 3;\n    let y = Math.floor(move.square / 3);\n    // the origin of the xy axis is top left, not bottom left\n    y = 2 - y;\n    const coordinates = `(${x}, ${y})`;\n    return (summary + coordinates);\n  }\n\n  getMoveAtIndex(index: number) {\n    const { descending } = this.state;\n    const { moves } = this.props;\n\n    if (descending) {\n      return index;\n    }\n\n    const reversedIndex = moves.length - index - 1;\n    return reversedIndex;\n  }\n\n  getMoves() {\n    const { descending } = this.state;\n    const { moves } = this.props;\n    const { onClick } = this.props;\n\n    const orderedMoves = descending ? moves : moves.slice().reverse();\n\n    const movesList = orderedMoves.map<any>((move: Move, index: number) => {\n      const summary = this.getPlaySummary(move);\n\n      return (\n        <button\n          type=\"button\"\n          onClick={() => onClick(this.getMoveAtIndex(index))}\n          className={this.checkCurrentMove(index)}\n        >\n          {summary}\n        </button>\n      );\n    });\n\n    return movesList;\n  }\n\n  checkCurrentMove(index: number) {\n    const { stepNumber } = this.props;\n\n    if (this.getMoveAtIndex(index) === stepNumber) {\n      return 'btn-current-move';\n    }\n\n    return 'btn-history';\n  }\n\n  reverseMoves() {\n    const { descending } = this.state;\n\n    this.setState({\n      descending: !descending,\n    });\n  }\n\n  render() {\n    const { descending } = this.state;\n    const { xIsNext } = this.props;\n    const { status } = this.props;\n\n    return (\n      <div className=\"game-info\">\n        <div className=\"next-player\">\n          <Status\n            xIsNext={xIsNext}\n            status={status}\n          />\n        </div>\n        <div className=\"history\">\n          <button\n            type=\"button\"\n            id=\"button-reverse\"\n            onClick={() => this.reverseMoves()}\n          >\n            { `view moves ${descending ? 'descending' : 'ascending'}` }\n          </button>\n          {this.getMoves()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Summary;\n","function checkWinner(lines, squares) {\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        gameEnded: true,\n        winner: squares[a],\n        line: lines[i],\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction isBoardFull(lines, squares) {\n  if (!squares.includes(null)) {\n    return {\n      gameEnded: true,\n      winner: null,\n      line: null,\n    };\n  }\n\n  return null;\n}\n\nfunction getGameStatus(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  const winner = checkWinner(lines, squares);\n  if (winner) {\n    return winner;\n  }\n\n  const draw = isBoardFull(lines, squares);\n  if (draw) {\n    return draw;\n  }\n\n  return {\n    gameEnded: false,\n    winner: null,\n    line: null,\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport { getGameStatus };\n","// @flow\nimport React from 'react';\nimport Board from '../Board/Board.jsx';\nimport Summary from '../Summary/Summary.jsx';\nimport { getGameStatus } from './helper';\n\ntype Props = any;\n\ntype State = {\n  history: Array<any>,\n  moves: Array<any>,\n  stepNumber: number,\n  xIsNext: boolean\n};\n\nclass Game extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      moves: [{\n        player: null,\n        square: null,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(squareNumber: number) {\n    const { history } = this.state;\n    const { stepNumber } = this.state;\n    const { xIsNext } = this.state;\n    const { moves } = this.state;\n\n    // first object in the history is the initial empty board as an array\n    const historyUntilStep = history.slice(0, stepNumber + 1);\n    // the first move when the board is empty is null, null too\n    const movesUntilStep = moves.slice(0, stepNumber + 1);\n    const current = historyUntilStep[historyUntilStep.length - 1];\n    const squares = current.squares.slice();\n    const player = xIsNext ? 'X' : 'O';\n\n    if (getGameStatus(squares).gameEnded || squares[squareNumber]) {\n      return;\n    }\n\n    squares[squareNumber] = player;\n\n    this.setState({\n      history: historyUntilStep.concat([{\n        squares,\n      }]),\n      moves: movesUntilStep.concat({ player, square: squareNumber }),\n      stepNumber: historyUntilStep.length,\n      xIsNext: !xIsNext,\n    });\n  }\n\n  jumpTo(stepNumber: number) {\n    this.setState({\n      stepNumber,\n      xIsNext: (stepNumber % 2) === 0,\n    });\n  }\n\n  render() {\n    const { history } = this.state;\n    const { stepNumber } = this.state;\n    const { xIsNext } = this.state;\n    const { moves } = this.state;\n\n    const current = history[stepNumber];\n    const status = getGameStatus(current.squares);\n\n    return (\n      <div className=\"game\">\n        <Board\n          squares={current.squares}\n          onClick={(square) => this.handleClick(square)}\n          winLine={status.line}\n        />\n        <Summary\n          moves={moves}\n          stepNumber={stepNumber}\n          onClick={(step) => this.jumpTo(step)}\n          status={status}\n          xIsNext={xIsNext}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Components/Game/Game.jsx';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}